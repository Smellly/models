# Path to checkpoint file or a directory containing checkpoint files. Passing
# a directory will only work if there is also a file named 'checkpoint' which
# lists the available checkpoints in the directory. It will not work if you
# point to a directory with just a copy of a model checkpoint: in that case,
# you will need to pass the checkpoint path explicitly.
# CHECKPOINT_PATH="${HOME}/projects/ic_models/im2txt/im2txt/model/flickr30"
# CHECKPOINT_PATH="${HOME}/projects/ic_models/im2txt/inceptionv4/model/train"
CHECKPOINT_PATH="${HOME}/projects/ic_models/im2txt/resnet152/model/train"

# Vocabulary file generated by the preprocessing script.
# VOCAB_FILE="${HOME}/projects/ic_models/im2txt/im2txt/data/flickr30/word_counts.txt"
VOCAB_FILE="${HOME}/projects/ic_models/im2txt/im2txt/data/mscoco/word_counts.txt"

# JPEG image file to caption.
IMAGE_FILE="${HOME}/projects/ic_models/im2txt/im2txt/data/mscoco/raw-data/val2014/,${HOME}/projects/coco-caption/annotations/captions_val2014.json"

# OUTPUT_FILE="${HOME}/projects/ic_models/im2txt/im2txt/results/results_val_cocoft3m.json"
OUTPUT_FILE="${HOME}/projects/ic_models/im2txt/resnet152/results/results_val_resnet152_700k.json"
# OUTPUT_FILE="${HOME}/projects/ic_models/im2txt/inceptionv4/results/results_val_inceptionv4_1m2.json"

# Build the inference binary.
cd ${HOME}/projects/ic_models/im2txt
bazel build -c opt //resnet152:val
# bazel build -c opt //inceptionv4:val
# bazel build -c opt //im2txt:val

# Ignore GPU devices (only necessary if your GPU is currently memory
# constrained, for example, by running the training script).
export CUDA_VISIBLE_DEVICES=1

# Run inference to generate captions.
# bazel-bin/im2txt/val \
# bazel-bin/inceptionv4/val \
bazel-bin/resnet152/val \
  --checkpoint_path=${CHECKPOINT_PATH} \
  --vocab_file=${VOCAB_FILE} \
  --input_files=${IMAGE_FILE} \
  --output_files=${OUTPUT_FILE}
